Terminals which are not used

   LEFT_ASSIGN
   RIGHT_ASSIGN
   AND_ASSIGN
   XOR_ASSIGN
   OR_ASSIGN
   CONST


Grammar

    0 $accept: starter $end

    1 starter: starter builder
    2        | builder

    3 builder: function
    4        | declaration

    5 function: type IDENTIFIER '(' argument_list ')' compound_stmt

    6 type: data_type pointer
    7     | data_type

    8 pointer: '*' pointer
    9        | '*'

   10 data_type: sign_specifier type_specifier
   11          | type_specifier

   12 sign_specifier: SIGNED
   13               | UNSIGNED

   14 type_specifier: INT
   15               | SHORT INT
   16               | SHORT
   17               | LONG
   18               | LONG INT
   19               | LONG_LONG
   20               | LONG_LONG INT

   21 argument_list: arguments
   22              | /* empty */

   23 arguments: arguments ',' arg
   24          | arg

   25 arg: type IDENTIFIER

   26 stmt: compound_stmt
   27     | single_stmt

   28 compound_stmt: '{' statements '}'

   29 statements: statements stmt
   30           | /* empty */

   31 single_stmt: if_block
   32            | for_block
   33            | while_block
   34            | declaration
   35            | function_call ';'
   36            | RETURN ';'
   37            | CONTINUE ';'
   38            | BREAK ';'
   39            | RETURN sub_expr ';'

   40 for_block: FOR '(' expression_stmt expression_stmt ')' stmt
   41          | FOR '(' expression_stmt expression_stmt expression ')' stmt

   42 if_block: IF '(' expression ')' stmt
   43         | IF '(' expression ')' stmt ELSE stmt

   44 while_block: WHILE '(' expression ')' stmt

   45 declaration: type declaration_list ';'
   46            | declaration_list ';'
   47            | unary_expr ';'

   48 declaration_list: declaration_list ',' sub_decl
   49                 | sub_decl

   50 sub_decl: assignment_expr
   51         | IDENTIFIER
   52         | array_index

   53 expression_stmt: expression ';'
   54                | ';'

   55 expression: expression ',' sub_expr
   56           | sub_expr

   57 sub_expr: sub_expr '>' sub_expr
   58         | sub_expr '<' sub_expr
   59         | sub_expr EQ sub_expr
   60         | sub_expr NOT_EQ sub_expr
   61         | sub_expr LS_EQ sub_expr
   62         | sub_expr GR_EQ sub_expr
   63         | sub_expr LOGICAL_AND sub_expr
   64         | sub_expr LOGICAL_OR sub_expr
   65         | '!' sub_expr
   66         | arithmetic_expr
   67         | assignment_expr
   68         | unary_expr

   69 assignment_expr: lhs assign_op arithmetic_expr
   70                | lhs assign_op array_index
   71                | lhs assign_op function_call
   72                | lhs assign_op unary_expr
   73                | unary_expr assign_op unary_expr

   74 unary_expr: lhs INCREMENT
   75           | lhs DECREMENT
   76           | DECREMENT lhs
   77           | INCREMENT lhs

   78 lhs: IDENTIFIER

   79 assign_op: '='
   80          | ADD_ASSIGN
   81          | SUB_ASSIGN
   82          | MUL_ASSIGN
   83          | DIV_ASSIGN
   84          | MOD_ASSIGN

   85 arithmetic_expr: arithmetic_expr '+' arithmetic_expr
   86                | arithmetic_expr '-' arithmetic_expr
   87                | arithmetic_expr '*' arithmetic_expr
   88                | arithmetic_expr '/' arithmetic_expr
   89                | arithmetic_expr '%' arithmetic_expr
   90                | '(' arithmetic_expr ')'
   91                | '-' arithmetic_expr
   92                | IDENTIFIER
   93                | constant

   94 constant: DEC_CONSTANT
   95         | HEX_CONSTANT

   96 array_index: IDENTIFIER '[' sub_expr ']'

   97 function_call: IDENTIFIER '(' parameter_list ')'
   98              | IDENTIFIER '(' ')'

   99 parameter_list: parameter_list ',' parameter
  100               | parameter

  101 parameter: sub_expr
  102          | STRING


Terminals, with rules where they appear

$end (0) 0
'!' (33) 65
'%' (37) 89
'(' (40) 5 40 41 42 43 44 90 97 98
')' (41) 5 40 41 42 43 44 90 97 98
'*' (42) 8 9 87
'+' (43) 85
',' (44) 23 48 55 99
'-' (45) 86 91
'/' (47) 88
';' (59) 35 36 37 38 39 45 46 47 53 54
'<' (60) 58
'=' (61) 79
'>' (62) 57
'[' (91) 96
']' (93) 96
'{' (123) 28
'}' (125) 28
error (256)
IDENTIFIER (258) 5 25 51 78 92 96 97 98
DEC_CONSTANT (259) 94
HEX_CONSTANT (260) 95
STRING (261) 102
LOGICAL_AND (262) 63
LOGICAL_OR (263) 64
LS_EQ (264) 61
GR_EQ (265) 62
EQ (266) 59
NOT_EQ (267) 60
MUL_ASSIGN (268) 82
DIV_ASSIGN (269) 83
MOD_ASSIGN (270) 84
ADD_ASSIGN (271) 80
SUB_ASSIGN (272) 81
LEFT_ASSIGN (273)
RIGHT_ASSIGN (274)
AND_ASSIGN (275)
XOR_ASSIGN (276)
OR_ASSIGN (277)
INCREMENT (278) 74 77
DECREMENT (279) 75 76
SHORT (280) 15 16
INT (281) 14 15 18 20
LONG (282) 17 18
LONG_LONG (283) 19 20
SIGNED (284) 12
UNSIGNED (285) 13
CONST (286)
IF (287) 42 43
FOR (288) 40 41
WHILE (289) 44
CONTINUE (290) 37
BREAK (291) 38
RETURN (292) 36 39
UMINUS (293)
LOWER_THAN_ELSE (294)
ELSE (295) 43


Nonterminals, with rules where they appear

$accept (58)
    on left: 0
starter (59)
    on left: 1 2, on right: 0 1
builder (60)
    on left: 3 4, on right: 1 2
function (61)
    on left: 5, on right: 3
type (62)
    on left: 6 7, on right: 5 25 45
pointer (63)
    on left: 8 9, on right: 6 8
data_type (64)
    on left: 10 11, on right: 6 7
sign_specifier (65)
    on left: 12 13, on right: 10
type_specifier (66)
    on left: 14 15 16 17 18 19 20, on right: 10 11
argument_list (67)
    on left: 21 22, on right: 5
arguments (68)
    on left: 23 24, on right: 21 23
arg (69)
    on left: 25, on right: 23 24
stmt (70)
    on left: 26 27, on right: 29 40 41 42 43 44
compound_stmt (71)
    on left: 28, on right: 5 26
statements (72)
    on left: 29 30, on right: 28 29
single_stmt (73)
    on left: 31 32 33 34 35 36 37 38 39, on right: 27
for_block (74)
    on left: 40 41, on right: 32
if_block (75)
    on left: 42 43, on right: 31
while_block (76)
    on left: 44, on right: 33
declaration (77)
    on left: 45 46 47, on right: 4 34
declaration_list (78)
    on left: 48 49, on right: 45 46 48
sub_decl (79)
    on left: 50 51 52, on right: 48 49
expression_stmt (80)
    on left: 53 54, on right: 40 41
expression (81)
    on left: 55 56, on right: 41 42 43 44 53 55
sub_expr (82)
    on left: 57 58 59 60 61 62 63 64 65 66 67 68, on right: 39 55 56
    57 58 59 60 61 62 63 64 65 96 101
assignment_expr (83)
    on left: 69 70 71 72 73, on right: 50 67
unary_expr (84)
    on left: 74 75 76 77, on right: 47 68 72 73
lhs (85)
    on left: 78, on right: 69 70 71 72 74 75 76 77
assign_op (86)
    on left: 79 80 81 82 83 84, on right: 69 70 71 72 73
arithmetic_expr (87)
    on left: 85 86 87 88 89 90 91 92 93, on right: 66 69 85 86 87 88
    89 90 91
constant (88)
    on left: 94 95, on right: 93
array_index (89)
    on left: 96, on right: 52 70
function_call (90)
    on left: 97 98, on right: 35 71
parameter_list (91)
    on left: 99 100, on right: 97 99
parameter (92)
    on left: 101 102, on right: 99 100


state 0

    0 $accept: . starter $end

    IDENTIFIER  shift, and go to state 1
    INCREMENT   shift, and go to state 2
    DECREMENT   shift, and go to state 3
    SHORT       shift, and go to state 4
    INT         shift, and go to state 5
    LONG        shift, and go to state 6
    LONG_LONG   shift, and go to state 7
    SIGNED      shift, and go to state 8
    UNSIGNED    shift, and go to state 9

    starter           go to state 10
    builder           go to state 11
    function          go to state 12
    type              go to state 13
    data_type         go to state 14
    sign_specifier    go to state 15
    type_specifier    go to state 16
    declaration       go to state 17
    declaration_list  go to state 18
    sub_decl          go to state 19
    assignment_expr   go to state 20
    unary_expr        go to state 21
    lhs               go to state 22
    array_index       go to state 23


state 1

   51 sub_decl: IDENTIFIER .
   78 lhs: IDENTIFIER .
   96 array_index: IDENTIFIER . '[' sub_expr ']'

    '['  shift, and go to state 24

    ','       reduce using rule 51 (sub_decl)
    ';'       reduce using rule 51 (sub_decl)
    $default  reduce using rule 78 (lhs)


state 2

   77 unary_expr: INCREMENT . lhs

    IDENTIFIER  shift, and go to state 25

    lhs  go to state 26


state 3

   76 unary_expr: DECREMENT . lhs

    IDENTIFIER  shift, and go to state 25

    lhs  go to state 27


state 4

   15 type_specifier: SHORT . INT
   16               | SHORT .

    INT  shift, and go to state 28

    $default  reduce using rule 16 (type_specifier)


state 5

   14 type_specifier: INT .

    $default  reduce using rule 14 (type_specifier)


state 6

   17 type_specifier: LONG .
   18               | LONG . INT

    INT  shift, and go to state 29

    $default  reduce using rule 17 (type_specifier)


state 7

   19 type_specifier: LONG_LONG .
   20               | LONG_LONG . INT

    INT  shift, and go to state 30

    $default  reduce using rule 19 (type_specifier)


state 8

   12 sign_specifier: SIGNED .

    $default  reduce using rule 12 (sign_specifier)


state 9

   13 sign_specifier: UNSIGNED .

    $default  reduce using rule 13 (sign_specifier)


state 10

    0 $accept: starter . $end
    1 starter: starter . builder

    $end        shift, and go to state 31
    IDENTIFIER  shift, and go to state 1
    INCREMENT   shift, and go to state 2
    DECREMENT   shift, and go to state 3
    SHORT       shift, and go to state 4
    INT         shift, and go to state 5
    LONG        shift, and go to state 6
    LONG_LONG   shift, and go to state 7
    SIGNED      shift, and go to state 8
    UNSIGNED    shift, and go to state 9

    builder           go to state 32
    function          go to state 12
    type              go to state 13
    data_type         go to state 14
    sign_specifier    go to state 15
    type_specifier    go to state 16
    declaration       go to state 17
    declaration_list  go to state 18
    sub_decl          go to state 19
    assignment_expr   go to state 20
    unary_expr        go to state 21
    lhs               go to state 22
    array_index       go to state 23


state 11

    2 starter: builder .

    $default  reduce using rule 2 (starter)


state 12

    3 builder: function .

    $default  reduce using rule 3 (builder)


state 13

    5 function: type . IDENTIFIER '(' argument_list ')' compound_stmt
   45 declaration: type . declaration_list ';'

    IDENTIFIER  shift, and go to state 33
    INCREMENT   shift, and go to state 2
    DECREMENT   shift, and go to state 3

    declaration_list  go to state 34
    sub_decl          go to state 19
    assignment_expr   go to state 20
    unary_expr        go to state 35
    lhs               go to state 22
    array_index       go to state 23


state 14

    6 type: data_type . pointer
    7     | data_type .

    '*'  shift, and go to state 36

    $default  reduce using rule 7 (type)

    pointer  go to state 37


state 15

   10 data_type: sign_specifier . type_specifier

    SHORT      shift, and go to state 4
    INT        shift, and go to state 5
    LONG       shift, and go to state 6
    LONG_LONG  shift, and go to state 7

    type_specifier  go to state 38


state 16

   11 data_type: type_specifier .

    $default  reduce using rule 11 (data_type)


state 17

    4 builder: declaration .

    $default  reduce using rule 4 (builder)


state 18

   46 declaration: declaration_list . ';'
   48 declaration_list: declaration_list . ',' sub_decl

    ','  shift, and go to state 39
    ';'  shift, and go to state 40


state 19

   49 declaration_list: sub_decl .

    $default  reduce using rule 49 (declaration_list)


state 20

   50 sub_decl: assignment_expr .

    $default  reduce using rule 50 (sub_decl)


state 21

   47 declaration: unary_expr . ';'
   73 assignment_expr: unary_expr . assign_op unary_expr

    MUL_ASSIGN  shift, and go to state 41
    DIV_ASSIGN  shift, and go to state 42
    MOD_ASSIGN  shift, and go to state 43
    ADD_ASSIGN  shift, and go to state 44
    SUB_ASSIGN  shift, and go to state 45
    '='         shift, and go to state 46
    ';'         shift, and go to state 47

    assign_op  go to state 48


state 22

   69 assignment_expr: lhs . assign_op arithmetic_expr
   70                | lhs . assign_op array_index
   71                | lhs . assign_op function_call
   72                | lhs . assign_op unary_expr
   74 unary_expr: lhs . INCREMENT
   75           | lhs . DECREMENT

    MUL_ASSIGN  shift, and go to state 41
    DIV_ASSIGN  shift, and go to state 42
    MOD_ASSIGN  shift, and go to state 43
    ADD_ASSIGN  shift, and go to state 44
    SUB_ASSIGN  shift, and go to state 45
    INCREMENT   shift, and go to state 49
    DECREMENT   shift, and go to state 50
    '='         shift, and go to state 46

    assign_op  go to state 51


state 23

   52 sub_decl: array_index .

    $default  reduce using rule 52 (sub_decl)


state 24

   96 array_index: IDENTIFIER '[' . sub_expr ']'

    IDENTIFIER    shift, and go to state 52
    DEC_CONSTANT  shift, and go to state 53
    HEX_CONSTANT  shift, and go to state 54
    INCREMENT     shift, and go to state 2
    DECREMENT     shift, and go to state 3
    '-'           shift, and go to state 55
    '!'           shift, and go to state 56
    '('           shift, and go to state 57

    sub_expr         go to state 58
    assignment_expr  go to state 59
    unary_expr       go to state 60
    lhs              go to state 22
    arithmetic_expr  go to state 61
    constant         go to state 62


state 25

   78 lhs: IDENTIFIER .

    $default  reduce using rule 78 (lhs)


state 26

   77 unary_expr: INCREMENT lhs .

    $default  reduce using rule 77 (unary_expr)


state 27

   76 unary_expr: DECREMENT lhs .

    $default  reduce using rule 76 (unary_expr)


state 28

   15 type_specifier: SHORT INT .

    $default  reduce using rule 15 (type_specifier)


state 29

   18 type_specifier: LONG INT .

    $default  reduce using rule 18 (type_specifier)


state 30

   20 type_specifier: LONG_LONG INT .

    $default  reduce using rule 20 (type_specifier)


state 31

    0 $accept: starter $end .

    $default  accept


state 32

    1 starter: starter builder .

    $default  reduce using rule 1 (starter)


state 33

    5 function: type IDENTIFIER . '(' argument_list ')' compound_stmt
   51 sub_decl: IDENTIFIER .
   78 lhs: IDENTIFIER .
   96 array_index: IDENTIFIER . '[' sub_expr ']'

    '('  shift, and go to state 63
    '['  shift, and go to state 24

    ','       reduce using rule 51 (sub_decl)
    ';'       reduce using rule 51 (sub_decl)
    $default  reduce using rule 78 (lhs)


state 34

   45 declaration: type declaration_list . ';'
   48 declaration_list: declaration_list . ',' sub_decl

    ','  shift, and go to state 39
    ';'  shift, and go to state 64


state 35

   73 assignment_expr: unary_expr . assign_op unary_expr

    MUL_ASSIGN  shift, and go to state 41
    DIV_ASSIGN  shift, and go to state 42
    MOD_ASSIGN  shift, and go to state 43
    ADD_ASSIGN  shift, and go to state 44
    SUB_ASSIGN  shift, and go to state 45
    '='         shift, and go to state 46

    assign_op  go to state 48


state 36

    8 pointer: '*' . pointer
    9        | '*' .

    '*'  shift, and go to state 36

    $default  reduce using rule 9 (pointer)

    pointer  go to state 65


state 37

    6 type: data_type pointer .

    $default  reduce using rule 6 (type)


state 38

   10 data_type: sign_specifier type_specifier .

    $default  reduce using rule 10 (data_type)


state 39

   48 declaration_list: declaration_list ',' . sub_decl

    IDENTIFIER  shift, and go to state 1
    INCREMENT   shift, and go to state 2
    DECREMENT   shift, and go to state 3

    sub_decl         go to state 66
    assignment_expr  go to state 20
    unary_expr       go to state 35
    lhs              go to state 22
    array_index      go to state 23


state 40

   46 declaration: declaration_list ';' .

    $default  reduce using rule 46 (declaration)


state 41

   82 assign_op: MUL_ASSIGN .

    $default  reduce using rule 82 (assign_op)


state 42

   83 assign_op: DIV_ASSIGN .

    $default  reduce using rule 83 (assign_op)


state 43

   84 assign_op: MOD_ASSIGN .

    $default  reduce using rule 84 (assign_op)


state 44

   80 assign_op: ADD_ASSIGN .

    $default  reduce using rule 80 (assign_op)


state 45

   81 assign_op: SUB_ASSIGN .

    $default  reduce using rule 81 (assign_op)


state 46

   79 assign_op: '=' .

    $default  reduce using rule 79 (assign_op)


state 47

   47 declaration: unary_expr ';' .

    $default  reduce using rule 47 (declaration)


state 48

   73 assignment_expr: unary_expr assign_op . unary_expr

    IDENTIFIER  shift, and go to state 25
    INCREMENT   shift, and go to state 2
    DECREMENT   shift, and go to state 3

    unary_expr  go to state 67
    lhs         go to state 68


state 49

   74 unary_expr: lhs INCREMENT .

    $default  reduce using rule 74 (unary_expr)


state 50

   75 unary_expr: lhs DECREMENT .

    $default  reduce using rule 75 (unary_expr)


state 51

   69 assignment_expr: lhs assign_op . arithmetic_expr
   70                | lhs assign_op . array_index
   71                | lhs assign_op . function_call
   72                | lhs assign_op . unary_expr

    IDENTIFIER    shift, and go to state 69
    DEC_CONSTANT  shift, and go to state 53
    HEX_CONSTANT  shift, and go to state 54
    INCREMENT     shift, and go to state 2
    DECREMENT     shift, and go to state 3
    '-'           shift, and go to state 55
    '('           shift, and go to state 57

    unary_expr       go to state 70
    lhs              go to state 68
    arithmetic_expr  go to state 71
    constant         go to state 62
    array_index      go to state 72
    function_call    go to state 73


state 52

   78 lhs: IDENTIFIER .
   92 arithmetic_expr: IDENTIFIER .

    MUL_ASSIGN  reduce using rule 78 (lhs)
    DIV_ASSIGN  reduce using rule 78 (lhs)
    MOD_ASSIGN  reduce using rule 78 (lhs)
    ADD_ASSIGN  reduce using rule 78 (lhs)
    SUB_ASSIGN  reduce using rule 78 (lhs)
    INCREMENT   reduce using rule 78 (lhs)
    DECREMENT   reduce using rule 78 (lhs)
    '='         reduce using rule 78 (lhs)
    $default    reduce using rule 92 (arithmetic_expr)


state 53

   94 constant: DEC_CONSTANT .

    $default  reduce using rule 94 (constant)


state 54

   95 constant: HEX_CONSTANT .

    $default  reduce using rule 95 (constant)


state 55

   91 arithmetic_expr: '-' . arithmetic_expr

    IDENTIFIER    shift, and go to state 74
    DEC_CONSTANT  shift, and go to state 53
    HEX_CONSTANT  shift, and go to state 54
    '-'           shift, and go to state 55
    '('           shift, and go to state 57

    arithmetic_expr  go to state 75
    constant         go to state 62


state 56

   65 sub_expr: '!' . sub_expr

    IDENTIFIER    shift, and go to state 52
    DEC_CONSTANT  shift, and go to state 53
    HEX_CONSTANT  shift, and go to state 54
    INCREMENT     shift, and go to state 2
    DECREMENT     shift, and go to state 3
    '-'           shift, and go to state 55
    '!'           shift, and go to state 56
    '('           shift, and go to state 57

    sub_expr         go to state 76
    assignment_expr  go to state 59
    unary_expr       go to state 60
    lhs              go to state 22
    arithmetic_expr  go to state 61
    constant         go to state 62


state 57

   90 arithmetic_expr: '(' . arithmetic_expr ')'

    IDENTIFIER    shift, and go to state 74
    DEC_CONSTANT  shift, and go to state 53
    HEX_CONSTANT  shift, and go to state 54
    '-'           shift, and go to state 55
    '('           shift, and go to state 57

    arithmetic_expr  go to state 77
    constant         go to state 62


state 58

   57 sub_expr: sub_expr . '>' sub_expr
   58         | sub_expr . '<' sub_expr
   59         | sub_expr . EQ sub_expr
   60         | sub_expr . NOT_EQ sub_expr
   61         | sub_expr . LS_EQ sub_expr
   62         | sub_expr . GR_EQ sub_expr
   63         | sub_expr . LOGICAL_AND sub_expr
   64         | sub_expr . LOGICAL_OR sub_expr
   96 array_index: IDENTIFIER '[' sub_expr . ']'

    LOGICAL_AND  shift, and go to state 78
    LOGICAL_OR   shift, and go to state 79
    LS_EQ        shift, and go to state 80
    GR_EQ        shift, and go to state 81
    EQ           shift, and go to state 82
    NOT_EQ       shift, and go to state 83
    '<'          shift, and go to state 84
    '>'          shift, and go to state 85
    ']'          shift, and go to state 86


state 59

   67 sub_expr: assignment_expr .

    $default  reduce using rule 67 (sub_expr)


state 60

   68 sub_expr: unary_expr .
   73 assignment_expr: unary_expr . assign_op unary_expr

    MUL_ASSIGN  shift, and go to state 41
    DIV_ASSIGN  shift, and go to state 42
    MOD_ASSIGN  shift, and go to state 43
    ADD_ASSIGN  shift, and go to state 44
    SUB_ASSIGN  shift, and go to state 45
    '='         shift, and go to state 46

    $default  reduce using rule 68 (sub_expr)

    assign_op  go to state 48


state 61

   66 sub_expr: arithmetic_expr .
   85 arithmetic_expr: arithmetic_expr . '+' arithmetic_expr
   86                | arithmetic_expr . '-' arithmetic_expr
   87                | arithmetic_expr . '*' arithmetic_expr
   88                | arithmetic_expr . '/' arithmetic_expr
   89                | arithmetic_expr . '%' arithmetic_expr

    '+'  shift, and go to state 87
    '-'  shift, and go to state 88
    '*'  shift, and go to state 89
    '/'  shift, and go to state 90
    '%'  shift, and go to state 91

    $default  reduce using rule 66 (sub_expr)


state 62

   93 arithmetic_expr: constant .

    $default  reduce using rule 93 (arithmetic_expr)


state 63

    5 function: type IDENTIFIER '(' . argument_list ')' compound_stmt

    SHORT      shift, and go to state 4
    INT        shift, and go to state 5
    LONG       shift, and go to state 6
    LONG_LONG  shift, and go to state 7
    SIGNED     shift, and go to state 8
    UNSIGNED   shift, and go to state 9

    $default  reduce using rule 22 (argument_list)

    type            go to state 92
    data_type       go to state 14
    sign_specifier  go to state 15
    type_specifier  go to state 16
    argument_list   go to state 93
    arguments       go to state 94
    arg             go to state 95


state 64

   45 declaration: type declaration_list ';' .

    $default  reduce using rule 45 (declaration)


state 65

    8 pointer: '*' pointer .

    $default  reduce using rule 8 (pointer)


state 66

   48 declaration_list: declaration_list ',' sub_decl .

    $default  reduce using rule 48 (declaration_list)


state 67

   73 assignment_expr: unary_expr assign_op unary_expr .

    $default  reduce using rule 73 (assignment_expr)


state 68

   74 unary_expr: lhs . INCREMENT
   75           | lhs . DECREMENT

    INCREMENT  shift, and go to state 49
    DECREMENT  shift, and go to state 50


state 69

   78 lhs: IDENTIFIER .
   92 arithmetic_expr: IDENTIFIER .
   96 array_index: IDENTIFIER . '[' sub_expr ']'
   97 function_call: IDENTIFIER . '(' parameter_list ')'
   98              | IDENTIFIER . '(' ')'

    '('  shift, and go to state 96
    '['  shift, and go to state 24

    INCREMENT  reduce using rule 78 (lhs)
    DECREMENT  reduce using rule 78 (lhs)
    $default   reduce using rule 92 (arithmetic_expr)


state 70

   72 assignment_expr: lhs assign_op unary_expr .

    $default  reduce using rule 72 (assignment_expr)


state 71

   69 assignment_expr: lhs assign_op arithmetic_expr .
   85 arithmetic_expr: arithmetic_expr . '+' arithmetic_expr
   86                | arithmetic_expr . '-' arithmetic_expr
   87                | arithmetic_expr . '*' arithmetic_expr
   88                | arithmetic_expr . '/' arithmetic_expr
   89                | arithmetic_expr . '%' arithmetic_expr

    '+'  shift, and go to state 87
    '-'  shift, and go to state 88
    '*'  shift, and go to state 89
    '/'  shift, and go to state 90
    '%'  shift, and go to state 91

    $default  reduce using rule 69 (assignment_expr)


state 72

   70 assignment_expr: lhs assign_op array_index .

    $default  reduce using rule 70 (assignment_expr)


state 73

   71 assignment_expr: lhs assign_op function_call .

    $default  reduce using rule 71 (assignment_expr)


state 74

   92 arithmetic_expr: IDENTIFIER .

    $default  reduce using rule 92 (arithmetic_expr)


state 75

   85 arithmetic_expr: arithmetic_expr . '+' arithmetic_expr
   86                | arithmetic_expr . '-' arithmetic_expr
   87                | arithmetic_expr . '*' arithmetic_expr
   88                | arithmetic_expr . '/' arithmetic_expr
   89                | arithmetic_expr . '%' arithmetic_expr
   91                | '-' arithmetic_expr .

    $default  reduce using rule 91 (arithmetic_expr)


state 76

   57 sub_expr: sub_expr . '>' sub_expr
   58         | sub_expr . '<' sub_expr
   59         | sub_expr . EQ sub_expr
   60         | sub_expr . NOT_EQ sub_expr
   61         | sub_expr . LS_EQ sub_expr
   62         | sub_expr . GR_EQ sub_expr
   63         | sub_expr . LOGICAL_AND sub_expr
   64         | sub_expr . LOGICAL_OR sub_expr
   65         | '!' sub_expr .

    $default  reduce using rule 65 (sub_expr)


state 77

   85 arithmetic_expr: arithmetic_expr . '+' arithmetic_expr
   86                | arithmetic_expr . '-' arithmetic_expr
   87                | arithmetic_expr . '*' arithmetic_expr
   88                | arithmetic_expr . '/' arithmetic_expr
   89                | arithmetic_expr . '%' arithmetic_expr
   90                | '(' arithmetic_expr . ')'

    '+'  shift, and go to state 87
    '-'  shift, and go to state 88
    '*'  shift, and go to state 89
    '/'  shift, and go to state 90
    '%'  shift, and go to state 91
    ')'  shift, and go to state 97


state 78

   63 sub_expr: sub_expr LOGICAL_AND . sub_expr

    IDENTIFIER    shift, and go to state 52
    DEC_CONSTANT  shift, and go to state 53
    HEX_CONSTANT  shift, and go to state 54
    INCREMENT     shift, and go to state 2
    DECREMENT     shift, and go to state 3
    '-'           shift, and go to state 55
    '!'           shift, and go to state 56
    '('           shift, and go to state 57

    sub_expr         go to state 98
    assignment_expr  go to state 59
    unary_expr       go to state 60
    lhs              go to state 22
    arithmetic_expr  go to state 61
    constant         go to state 62


state 79

   64 sub_expr: sub_expr LOGICAL_OR . sub_expr

    IDENTIFIER    shift, and go to state 52
    DEC_CONSTANT  shift, and go to state 53
    HEX_CONSTANT  shift, and go to state 54
    INCREMENT     shift, and go to state 2
    DECREMENT     shift, and go to state 3
    '-'           shift, and go to state 55
    '!'           shift, and go to state 56
    '('           shift, and go to state 57

    sub_expr         go to state 99
    assignment_expr  go to state 59
    unary_expr       go to state 60
    lhs              go to state 22
    arithmetic_expr  go to state 61
    constant         go to state 62


state 80

   61 sub_expr: sub_expr LS_EQ . sub_expr

    IDENTIFIER    shift, and go to state 52
    DEC_CONSTANT  shift, and go to state 53
    HEX_CONSTANT  shift, and go to state 54
    INCREMENT     shift, and go to state 2
    DECREMENT     shift, and go to state 3
    '-'           shift, and go to state 55
    '!'           shift, and go to state 56
    '('           shift, and go to state 57

    sub_expr         go to state 100
    assignment_expr  go to state 59
    unary_expr       go to state 60
    lhs              go to state 22
    arithmetic_expr  go to state 61
    constant         go to state 62


state 81

   62 sub_expr: sub_expr GR_EQ . sub_expr

    IDENTIFIER    shift, and go to state 52
    DEC_CONSTANT  shift, and go to state 53
    HEX_CONSTANT  shift, and go to state 54
    INCREMENT     shift, and go to state 2
    DECREMENT     shift, and go to state 3
    '-'           shift, and go to state 55
    '!'           shift, and go to state 56
    '('           shift, and go to state 57

    sub_expr         go to state 101
    assignment_expr  go to state 59
    unary_expr       go to state 60
    lhs              go to state 22
    arithmetic_expr  go to state 61
    constant         go to state 62


state 82

   59 sub_expr: sub_expr EQ . sub_expr

    IDENTIFIER    shift, and go to state 52
    DEC_CONSTANT  shift, and go to state 53
    HEX_CONSTANT  shift, and go to state 54
    INCREMENT     shift, and go to state 2
    DECREMENT     shift, and go to state 3
    '-'           shift, and go to state 55
    '!'           shift, and go to state 56
    '('           shift, and go to state 57

    sub_expr         go to state 102
    assignment_expr  go to state 59
    unary_expr       go to state 60
    lhs              go to state 22
    arithmetic_expr  go to state 61
    constant         go to state 62


state 83

   60 sub_expr: sub_expr NOT_EQ . sub_expr

    IDENTIFIER    shift, and go to state 52
    DEC_CONSTANT  shift, and go to state 53
    HEX_CONSTANT  shift, and go to state 54
    INCREMENT     shift, and go to state 2
    DECREMENT     shift, and go to state 3
    '-'           shift, and go to state 55
    '!'           shift, and go to state 56
    '('           shift, and go to state 57

    sub_expr         go to state 103
    assignment_expr  go to state 59
    unary_expr       go to state 60
    lhs              go to state 22
    arithmetic_expr  go to state 61
    constant         go to state 62


state 84

   58 sub_expr: sub_expr '<' . sub_expr

    IDENTIFIER    shift, and go to state 52
    DEC_CONSTANT  shift, and go to state 53
    HEX_CONSTANT  shift, and go to state 54
    INCREMENT     shift, and go to state 2
    DECREMENT     shift, and go to state 3
    '-'           shift, and go to state 55
    '!'           shift, and go to state 56
    '('           shift, and go to state 57

    sub_expr         go to state 104
    assignment_expr  go to state 59
    unary_expr       go to state 60
    lhs              go to state 22
    arithmetic_expr  go to state 61
    constant         go to state 62


state 85

   57 sub_expr: sub_expr '>' . sub_expr

    IDENTIFIER    shift, and go to state 52
    DEC_CONSTANT  shift, and go to state 53
    HEX_CONSTANT  shift, and go to state 54
    INCREMENT     shift, and go to state 2
    DECREMENT     shift, and go to state 3
    '-'           shift, and go to state 55
    '!'           shift, and go to state 56
    '('           shift, and go to state 57

    sub_expr         go to state 105
    assignment_expr  go to state 59
    unary_expr       go to state 60
    lhs              go to state 22
    arithmetic_expr  go to state 61
    constant         go to state 62


state 86

   96 array_index: IDENTIFIER '[' sub_expr ']' .

    $default  reduce using rule 96 (array_index)


state 87

   85 arithmetic_expr: arithmetic_expr '+' . arithmetic_expr

    IDENTIFIER    shift, and go to state 74
    DEC_CONSTANT  shift, and go to state 53
    HEX_CONSTANT  shift, and go to state 54
    '-'           shift, and go to state 55
    '('           shift, and go to state 57

    arithmetic_expr  go to state 106
    constant         go to state 62


state 88

   86 arithmetic_expr: arithmetic_expr '-' . arithmetic_expr

    IDENTIFIER    shift, and go to state 74
    DEC_CONSTANT  shift, and go to state 53
    HEX_CONSTANT  shift, and go to state 54
    '-'           shift, and go to state 55
    '('           shift, and go to state 57

    arithmetic_expr  go to state 107
    constant         go to state 62


state 89

   87 arithmetic_expr: arithmetic_expr '*' . arithmetic_expr

    IDENTIFIER    shift, and go to state 74
    DEC_CONSTANT  shift, and go to state 53
    HEX_CONSTANT  shift, and go to state 54
    '-'           shift, and go to state 55
    '('           shift, and go to state 57

    arithmetic_expr  go to state 108
    constant         go to state 62


state 90

   88 arithmetic_expr: arithmetic_expr '/' . arithmetic_expr

    IDENTIFIER    shift, and go to state 74
    DEC_CONSTANT  shift, and go to state 53
    HEX_CONSTANT  shift, and go to state 54
    '-'           shift, and go to state 55
    '('           shift, and go to state 57

    arithmetic_expr  go to state 109
    constant         go to state 62


state 91

   89 arithmetic_expr: arithmetic_expr '%' . arithmetic_expr

    IDENTIFIER    shift, and go to state 74
    DEC_CONSTANT  shift, and go to state 53
    HEX_CONSTANT  shift, and go to state 54
    '-'           shift, and go to state 55
    '('           shift, and go to state 57

    arithmetic_expr  go to state 110
    constant         go to state 62


state 92

   25 arg: type . IDENTIFIER

    IDENTIFIER  shift, and go to state 111


state 93

    5 function: type IDENTIFIER '(' argument_list . ')' compound_stmt

    ')'  shift, and go to state 112


state 94

   21 argument_list: arguments .
   23 arguments: arguments . ',' arg

    ','  shift, and go to state 113

    $default  reduce using rule 21 (argument_list)


state 95

   24 arguments: arg .

    $default  reduce using rule 24 (arguments)


state 96

   97 function_call: IDENTIFIER '(' . parameter_list ')'
   98              | IDENTIFIER '(' . ')'

    IDENTIFIER    shift, and go to state 52
    DEC_CONSTANT  shift, and go to state 53
    HEX_CONSTANT  shift, and go to state 54
    STRING        shift, and go to state 114
    INCREMENT     shift, and go to state 2
    DECREMENT     shift, and go to state 3
    '-'           shift, and go to state 55
    '!'           shift, and go to state 56
    '('           shift, and go to state 57
    ')'           shift, and go to state 115

    sub_expr         go to state 116
    assignment_expr  go to state 59
    unary_expr       go to state 60
    lhs              go to state 22
    arithmetic_expr  go to state 61
    constant         go to state 62
    parameter_list   go to state 117
    parameter        go to state 118


state 97

   90 arithmetic_expr: '(' arithmetic_expr ')' .

    $default  reduce using rule 90 (arithmetic_expr)


state 98

   57 sub_expr: sub_expr . '>' sub_expr
   58         | sub_expr . '<' sub_expr
   59         | sub_expr . EQ sub_expr
   60         | sub_expr . NOT_EQ sub_expr
   61         | sub_expr . LS_EQ sub_expr
   62         | sub_expr . GR_EQ sub_expr
   63         | sub_expr . LOGICAL_AND sub_expr
   63         | sub_expr LOGICAL_AND sub_expr .
   64         | sub_expr . LOGICAL_OR sub_expr

    LS_EQ   shift, and go to state 80
    GR_EQ   shift, and go to state 81
    EQ      shift, and go to state 82
    NOT_EQ  shift, and go to state 83
    '<'     shift, and go to state 84
    '>'     shift, and go to state 85

    $default  reduce using rule 63 (sub_expr)


state 99

   57 sub_expr: sub_expr . '>' sub_expr
   58         | sub_expr . '<' sub_expr
   59         | sub_expr . EQ sub_expr
   60         | sub_expr . NOT_EQ sub_expr
   61         | sub_expr . LS_EQ sub_expr
   62         | sub_expr . GR_EQ sub_expr
   63         | sub_expr . LOGICAL_AND sub_expr
   64         | sub_expr . LOGICAL_OR sub_expr
   64         | sub_expr LOGICAL_OR sub_expr .

    LOGICAL_AND  shift, and go to state 78
    LS_EQ        shift, and go to state 80
    GR_EQ        shift, and go to state 81
    EQ           shift, and go to state 82
    NOT_EQ       shift, and go to state 83
    '<'          shift, and go to state 84
    '>'          shift, and go to state 85

    $default  reduce using rule 64 (sub_expr)


state 100

   57 sub_expr: sub_expr . '>' sub_expr
   58         | sub_expr . '<' sub_expr
   59         | sub_expr . EQ sub_expr
   60         | sub_expr . NOT_EQ sub_expr
   61         | sub_expr . LS_EQ sub_expr
   61         | sub_expr LS_EQ sub_expr .
   62         | sub_expr . GR_EQ sub_expr
   63         | sub_expr . LOGICAL_AND sub_expr
   64         | sub_expr . LOGICAL_OR sub_expr

    $default  reduce using rule 61 (sub_expr)


state 101

   57 sub_expr: sub_expr . '>' sub_expr
   58         | sub_expr . '<' sub_expr
   59         | sub_expr . EQ sub_expr
   60         | sub_expr . NOT_EQ sub_expr
   61         | sub_expr . LS_EQ sub_expr
   62         | sub_expr . GR_EQ sub_expr
   62         | sub_expr GR_EQ sub_expr .
   63         | sub_expr . LOGICAL_AND sub_expr
   64         | sub_expr . LOGICAL_OR sub_expr

    $default  reduce using rule 62 (sub_expr)


state 102

   57 sub_expr: sub_expr . '>' sub_expr
   58         | sub_expr . '<' sub_expr
   59         | sub_expr . EQ sub_expr
   59         | sub_expr EQ sub_expr .
   60         | sub_expr . NOT_EQ sub_expr
   61         | sub_expr . LS_EQ sub_expr
   62         | sub_expr . GR_EQ sub_expr
   63         | sub_expr . LOGICAL_AND sub_expr
   64         | sub_expr . LOGICAL_OR sub_expr

    LS_EQ  shift, and go to state 80
    GR_EQ  shift, and go to state 81
    '<'    shift, and go to state 84
    '>'    shift, and go to state 85

    $default  reduce using rule 59 (sub_expr)


state 103

   57 sub_expr: sub_expr . '>' sub_expr
   58         | sub_expr . '<' sub_expr
   59         | sub_expr . EQ sub_expr
   60         | sub_expr . NOT_EQ sub_expr
   60         | sub_expr NOT_EQ sub_expr .
   61         | sub_expr . LS_EQ sub_expr
   62         | sub_expr . GR_EQ sub_expr
   63         | sub_expr . LOGICAL_AND sub_expr
   64         | sub_expr . LOGICAL_OR sub_expr

    LS_EQ  shift, and go to state 80
    GR_EQ  shift, and go to state 81
    '<'    shift, and go to state 84
    '>'    shift, and go to state 85

    $default  reduce using rule 60 (sub_expr)


state 104

   57 sub_expr: sub_expr . '>' sub_expr
   58         | sub_expr . '<' sub_expr
   58         | sub_expr '<' sub_expr .
   59         | sub_expr . EQ sub_expr
   60         | sub_expr . NOT_EQ sub_expr
   61         | sub_expr . LS_EQ sub_expr
   62         | sub_expr . GR_EQ sub_expr
   63         | sub_expr . LOGICAL_AND sub_expr
   64         | sub_expr . LOGICAL_OR sub_expr

    $default  reduce using rule 58 (sub_expr)


state 105

   57 sub_expr: sub_expr . '>' sub_expr
   57         | sub_expr '>' sub_expr .
   58         | sub_expr . '<' sub_expr
   59         | sub_expr . EQ sub_expr
   60         | sub_expr . NOT_EQ sub_expr
   61         | sub_expr . LS_EQ sub_expr
   62         | sub_expr . GR_EQ sub_expr
   63         | sub_expr . LOGICAL_AND sub_expr
   64         | sub_expr . LOGICAL_OR sub_expr

    $default  reduce using rule 57 (sub_expr)


state 106

   85 arithmetic_expr: arithmetic_expr . '+' arithmetic_expr
   85                | arithmetic_expr '+' arithmetic_expr .
   86                | arithmetic_expr . '-' arithmetic_expr
   87                | arithmetic_expr . '*' arithmetic_expr
   88                | arithmetic_expr . '/' arithmetic_expr
   89                | arithmetic_expr . '%' arithmetic_expr

    '*'  shift, and go to state 89
    '/'  shift, and go to state 90
    '%'  shift, and go to state 91

    $default  reduce using rule 85 (arithmetic_expr)


state 107

   85 arithmetic_expr: arithmetic_expr . '+' arithmetic_expr
   86                | arithmetic_expr . '-' arithmetic_expr
   86                | arithmetic_expr '-' arithmetic_expr .
   87                | arithmetic_expr . '*' arithmetic_expr
   88                | arithmetic_expr . '/' arithmetic_expr
   89                | arithmetic_expr . '%' arithmetic_expr

    '*'  shift, and go to state 89
    '/'  shift, and go to state 90
    '%'  shift, and go to state 91

    $default  reduce using rule 86 (arithmetic_expr)


state 108

   85 arithmetic_expr: arithmetic_expr . '+' arithmetic_expr
   86                | arithmetic_expr . '-' arithmetic_expr
   87                | arithmetic_expr . '*' arithmetic_expr
   87                | arithmetic_expr '*' arithmetic_expr .
   88                | arithmetic_expr . '/' arithmetic_expr
   89                | arithmetic_expr . '%' arithmetic_expr

    $default  reduce using rule 87 (arithmetic_expr)


state 109

   85 arithmetic_expr: arithmetic_expr . '+' arithmetic_expr
   86                | arithmetic_expr . '-' arithmetic_expr
   87                | arithmetic_expr . '*' arithmetic_expr
   88                | arithmetic_expr . '/' arithmetic_expr
   88                | arithmetic_expr '/' arithmetic_expr .
   89                | arithmetic_expr . '%' arithmetic_expr

    $default  reduce using rule 88 (arithmetic_expr)


state 110

   85 arithmetic_expr: arithmetic_expr . '+' arithmetic_expr
   86                | arithmetic_expr . '-' arithmetic_expr
   87                | arithmetic_expr . '*' arithmetic_expr
   88                | arithmetic_expr . '/' arithmetic_expr
   89                | arithmetic_expr . '%' arithmetic_expr
   89                | arithmetic_expr '%' arithmetic_expr .

    $default  reduce using rule 89 (arithmetic_expr)


state 111

   25 arg: type IDENTIFIER .

    $default  reduce using rule 25 (arg)


state 112

    5 function: type IDENTIFIER '(' argument_list ')' . compound_stmt

    '{'  shift, and go to state 119

    compound_stmt  go to state 120


state 113

   23 arguments: arguments ',' . arg

    SHORT      shift, and go to state 4
    INT        shift, and go to state 5
    LONG       shift, and go to state 6
    LONG_LONG  shift, and go to state 7
    SIGNED     shift, and go to state 8
    UNSIGNED   shift, and go to state 9

    type            go to state 92
    data_type       go to state 14
    sign_specifier  go to state 15
    type_specifier  go to state 16
    arg             go to state 121


state 114

  102 parameter: STRING .

    $default  reduce using rule 102 (parameter)


state 115

   98 function_call: IDENTIFIER '(' ')' .

    $default  reduce using rule 98 (function_call)


state 116

   57 sub_expr: sub_expr . '>' sub_expr
   58         | sub_expr . '<' sub_expr
   59         | sub_expr . EQ sub_expr
   60         | sub_expr . NOT_EQ sub_expr
   61         | sub_expr . LS_EQ sub_expr
   62         | sub_expr . GR_EQ sub_expr
   63         | sub_expr . LOGICAL_AND sub_expr
   64         | sub_expr . LOGICAL_OR sub_expr
  101 parameter: sub_expr .

    LOGICAL_AND  shift, and go to state 78
    LOGICAL_OR   shift, and go to state 79
    LS_EQ        shift, and go to state 80
    GR_EQ        shift, and go to state 81
    EQ           shift, and go to state 82
    NOT_EQ       shift, and go to state 83
    '<'          shift, and go to state 84
    '>'          shift, and go to state 85

    $default  reduce using rule 101 (parameter)


state 117

   97 function_call: IDENTIFIER '(' parameter_list . ')'
   99 parameter_list: parameter_list . ',' parameter

    ','  shift, and go to state 122
    ')'  shift, and go to state 123


state 118

  100 parameter_list: parameter .

    $default  reduce using rule 100 (parameter_list)


state 119

   28 compound_stmt: '{' . statements '}'

    $default  reduce using rule 30 (statements)

    statements  go to state 124


state 120

    5 function: type IDENTIFIER '(' argument_list ')' compound_stmt .

    $default  reduce using rule 5 (function)


state 121

   23 arguments: arguments ',' arg .

    $default  reduce using rule 23 (arguments)


state 122

   99 parameter_list: parameter_list ',' . parameter

    IDENTIFIER    shift, and go to state 52
    DEC_CONSTANT  shift, and go to state 53
    HEX_CONSTANT  shift, and go to state 54
    STRING        shift, and go to state 114
    INCREMENT     shift, and go to state 2
    DECREMENT     shift, and go to state 3
    '-'           shift, and go to state 55
    '!'           shift, and go to state 56
    '('           shift, and go to state 57

    sub_expr         go to state 116
    assignment_expr  go to state 59
    unary_expr       go to state 60
    lhs              go to state 22
    arithmetic_expr  go to state 61
    constant         go to state 62
    parameter        go to state 125


state 123

   97 function_call: IDENTIFIER '(' parameter_list ')' .

    $default  reduce using rule 97 (function_call)


state 124

   28 compound_stmt: '{' statements . '}'
   29 statements: statements . stmt

    IDENTIFIER  shift, and go to state 126
    INCREMENT   shift, and go to state 2
    DECREMENT   shift, and go to state 3
    SHORT       shift, and go to state 4
    INT         shift, and go to state 5
    LONG        shift, and go to state 6
    LONG_LONG   shift, and go to state 7
    SIGNED      shift, and go to state 8
    UNSIGNED    shift, and go to state 9
    IF          shift, and go to state 127
    FOR         shift, and go to state 128
    WHILE       shift, and go to state 129
    CONTINUE    shift, and go to state 130
    BREAK       shift, and go to state 131
    RETURN      shift, and go to state 132
    '{'         shift, and go to state 119
    '}'         shift, and go to state 133

    type              go to state 134
    data_type         go to state 14
    sign_specifier    go to state 15
    type_specifier    go to state 16
    stmt              go to state 135
    compound_stmt     go to state 136
    single_stmt       go to state 137
    for_block         go to state 138
    if_block          go to state 139
    while_block       go to state 140
    declaration       go to state 141
    declaration_list  go to state 18
    sub_decl          go to state 19
    assignment_expr   go to state 20
    unary_expr        go to state 21
    lhs               go to state 22
    array_index       go to state 23
    function_call     go to state 142


state 125

   99 parameter_list: parameter_list ',' parameter .

    $default  reduce using rule 99 (parameter_list)


state 126

   51 sub_decl: IDENTIFIER .
   78 lhs: IDENTIFIER .
   96 array_index: IDENTIFIER . '[' sub_expr ']'
   97 function_call: IDENTIFIER . '(' parameter_list ')'
   98              | IDENTIFIER . '(' ')'

    '('  shift, and go to state 96
    '['  shift, and go to state 24

    ','       reduce using rule 51 (sub_decl)
    ';'       reduce using rule 51 (sub_decl)
    $default  reduce using rule 78 (lhs)


state 127

   42 if_block: IF . '(' expression ')' stmt
   43         | IF . '(' expression ')' stmt ELSE stmt

    '('  shift, and go to state 143


state 128

   40 for_block: FOR . '(' expression_stmt expression_stmt ')' stmt
   41          | FOR . '(' expression_stmt expression_stmt expression ')' stmt

    '('  shift, and go to state 144


state 129

   44 while_block: WHILE . '(' expression ')' stmt

    '('  shift, and go to state 145


state 130

   37 single_stmt: CONTINUE . ';'

    ';'  shift, and go to state 146


state 131

   38 single_stmt: BREAK . ';'

    ';'  shift, and go to state 147


state 132

   36 single_stmt: RETURN . ';'
   39            | RETURN . sub_expr ';'

    IDENTIFIER    shift, and go to state 52
    DEC_CONSTANT  shift, and go to state 53
    HEX_CONSTANT  shift, and go to state 54
    INCREMENT     shift, and go to state 2
    DECREMENT     shift, and go to state 3
    '-'           shift, and go to state 55
    '!'           shift, and go to state 56
    '('           shift, and go to state 57
    ';'           shift, and go to state 148

    sub_expr         go to state 149
    assignment_expr  go to state 59
    unary_expr       go to state 60
    lhs              go to state 22
    arithmetic_expr  go to state 61
    constant         go to state 62


state 133

   28 compound_stmt: '{' statements '}' .

    $default  reduce using rule 28 (compound_stmt)


state 134

   45 declaration: type . declaration_list ';'

    IDENTIFIER  shift, and go to state 1
    INCREMENT   shift, and go to state 2
    DECREMENT   shift, and go to state 3

    declaration_list  go to state 34
    sub_decl          go to state 19
    assignment_expr   go to state 20
    unary_expr        go to state 35
    lhs               go to state 22
    array_index       go to state 23


state 135

   29 statements: statements stmt .

    $default  reduce using rule 29 (statements)


state 136

   26 stmt: compound_stmt .

    $default  reduce using rule 26 (stmt)


state 137

   27 stmt: single_stmt .

    $default  reduce using rule 27 (stmt)


state 138

   32 single_stmt: for_block .

    $default  reduce using rule 32 (single_stmt)


state 139

   31 single_stmt: if_block .

    $default  reduce using rule 31 (single_stmt)


state 140

   33 single_stmt: while_block .

    $default  reduce using rule 33 (single_stmt)


state 141

   34 single_stmt: declaration .

    $default  reduce using rule 34 (single_stmt)


state 142

   35 single_stmt: function_call . ';'

    ';'  shift, and go to state 150


state 143

   42 if_block: IF '(' . expression ')' stmt
   43         | IF '(' . expression ')' stmt ELSE stmt

    IDENTIFIER    shift, and go to state 52
    DEC_CONSTANT  shift, and go to state 53
    HEX_CONSTANT  shift, and go to state 54
    INCREMENT     shift, and go to state 2
    DECREMENT     shift, and go to state 3
    '-'           shift, and go to state 55
    '!'           shift, and go to state 56
    '('           shift, and go to state 57

    expression       go to state 151
    sub_expr         go to state 152
    assignment_expr  go to state 59
    unary_expr       go to state 60
    lhs              go to state 22
    arithmetic_expr  go to state 61
    constant         go to state 62


state 144

   40 for_block: FOR '(' . expression_stmt expression_stmt ')' stmt
   41          | FOR '(' . expression_stmt expression_stmt expression ')' stmt

    IDENTIFIER    shift, and go to state 52
    DEC_CONSTANT  shift, and go to state 53
    HEX_CONSTANT  shift, and go to state 54
    INCREMENT     shift, and go to state 2
    DECREMENT     shift, and go to state 3
    '-'           shift, and go to state 55
    '!'           shift, and go to state 56
    '('           shift, and go to state 57
    ';'           shift, and go to state 153

    expression_stmt  go to state 154
    expression       go to state 155
    sub_expr         go to state 152
    assignment_expr  go to state 59
    unary_expr       go to state 60
    lhs              go to state 22
    arithmetic_expr  go to state 61
    constant         go to state 62


state 145

   44 while_block: WHILE '(' . expression ')' stmt

    IDENTIFIER    shift, and go to state 52
    DEC_CONSTANT  shift, and go to state 53
    HEX_CONSTANT  shift, and go to state 54
    INCREMENT     shift, and go to state 2
    DECREMENT     shift, and go to state 3
    '-'           shift, and go to state 55
    '!'           shift, and go to state 56
    '('           shift, and go to state 57

    expression       go to state 156
    sub_expr         go to state 152
    assignment_expr  go to state 59
    unary_expr       go to state 60
    lhs              go to state 22
    arithmetic_expr  go to state 61
    constant         go to state 62


state 146

   37 single_stmt: CONTINUE ';' .

    $default  reduce using rule 37 (single_stmt)


state 147

   38 single_stmt: BREAK ';' .

    $default  reduce using rule 38 (single_stmt)


state 148

   36 single_stmt: RETURN ';' .

    $default  reduce using rule 36 (single_stmt)


state 149

   39 single_stmt: RETURN sub_expr . ';'
   57 sub_expr: sub_expr . '>' sub_expr
   58         | sub_expr . '<' sub_expr
   59         | sub_expr . EQ sub_expr
   60         | sub_expr . NOT_EQ sub_expr
   61         | sub_expr . LS_EQ sub_expr
   62         | sub_expr . GR_EQ sub_expr
   63         | sub_expr . LOGICAL_AND sub_expr
   64         | sub_expr . LOGICAL_OR sub_expr

    LOGICAL_AND  shift, and go to state 78
    LOGICAL_OR   shift, and go to state 79
    LS_EQ        shift, and go to state 80
    GR_EQ        shift, and go to state 81
    EQ           shift, and go to state 82
    NOT_EQ       shift, and go to state 83
    '<'          shift, and go to state 84
    '>'          shift, and go to state 85
    ';'          shift, and go to state 157


state 150

   35 single_stmt: function_call ';' .

    $default  reduce using rule 35 (single_stmt)


state 151

   42 if_block: IF '(' expression . ')' stmt
   43         | IF '(' expression . ')' stmt ELSE stmt
   55 expression: expression . ',' sub_expr

    ','  shift, and go to state 158
    ')'  shift, and go to state 159


state 152

   56 expression: sub_expr .
   57 sub_expr: sub_expr . '>' sub_expr
   58         | sub_expr . '<' sub_expr
   59         | sub_expr . EQ sub_expr
   60         | sub_expr . NOT_EQ sub_expr
   61         | sub_expr . LS_EQ sub_expr
   62         | sub_expr . GR_EQ sub_expr
   63         | sub_expr . LOGICAL_AND sub_expr
   64         | sub_expr . LOGICAL_OR sub_expr

    LOGICAL_AND  shift, and go to state 78
    LOGICAL_OR   shift, and go to state 79
    LS_EQ        shift, and go to state 80
    GR_EQ        shift, and go to state 81
    EQ           shift, and go to state 82
    NOT_EQ       shift, and go to state 83
    '<'          shift, and go to state 84
    '>'          shift, and go to state 85

    $default  reduce using rule 56 (expression)


state 153

   54 expression_stmt: ';' .

    $default  reduce using rule 54 (expression_stmt)


state 154

   40 for_block: FOR '(' expression_stmt . expression_stmt ')' stmt
   41          | FOR '(' expression_stmt . expression_stmt expression ')' stmt

    IDENTIFIER    shift, and go to state 52
    DEC_CONSTANT  shift, and go to state 53
    HEX_CONSTANT  shift, and go to state 54
    INCREMENT     shift, and go to state 2
    DECREMENT     shift, and go to state 3
    '-'           shift, and go to state 55
    '!'           shift, and go to state 56
    '('           shift, and go to state 57
    ';'           shift, and go to state 153

    expression_stmt  go to state 160
    expression       go to state 155
    sub_expr         go to state 152
    assignment_expr  go to state 59
    unary_expr       go to state 60
    lhs              go to state 22
    arithmetic_expr  go to state 61
    constant         go to state 62


state 155

   53 expression_stmt: expression . ';'
   55 expression: expression . ',' sub_expr

    ','  shift, and go to state 158
    ';'  shift, and go to state 161


state 156

   44 while_block: WHILE '(' expression . ')' stmt
   55 expression: expression . ',' sub_expr

    ','  shift, and go to state 158
    ')'  shift, and go to state 162


state 157

   39 single_stmt: RETURN sub_expr ';' .

    $default  reduce using rule 39 (single_stmt)


state 158

   55 expression: expression ',' . sub_expr

    IDENTIFIER    shift, and go to state 52
    DEC_CONSTANT  shift, and go to state 53
    HEX_CONSTANT  shift, and go to state 54
    INCREMENT     shift, and go to state 2
    DECREMENT     shift, and go to state 3
    '-'           shift, and go to state 55
    '!'           shift, and go to state 56
    '('           shift, and go to state 57

    sub_expr         go to state 163
    assignment_expr  go to state 59
    unary_expr       go to state 60
    lhs              go to state 22
    arithmetic_expr  go to state 61
    constant         go to state 62


state 159

   42 if_block: IF '(' expression ')' . stmt
   43         | IF '(' expression ')' . stmt ELSE stmt

    IDENTIFIER  shift, and go to state 126
    INCREMENT   shift, and go to state 2
    DECREMENT   shift, and go to state 3
    SHORT       shift, and go to state 4
    INT         shift, and go to state 5
    LONG        shift, and go to state 6
    LONG_LONG   shift, and go to state 7
    SIGNED      shift, and go to state 8
    UNSIGNED    shift, and go to state 9
    IF          shift, and go to state 127
    FOR         shift, and go to state 128
    WHILE       shift, and go to state 129
    CONTINUE    shift, and go to state 130
    BREAK       shift, and go to state 131
    RETURN      shift, and go to state 132
    '{'         shift, and go to state 119

    type              go to state 134
    data_type         go to state 14
    sign_specifier    go to state 15
    type_specifier    go to state 16
    stmt              go to state 164
    compound_stmt     go to state 136
    single_stmt       go to state 137
    for_block         go to state 138
    if_block          go to state 139
    while_block       go to state 140
    declaration       go to state 141
    declaration_list  go to state 18
    sub_decl          go to state 19
    assignment_expr   go to state 20
    unary_expr        go to state 21
    lhs               go to state 22
    array_index       go to state 23
    function_call     go to state 142


state 160

   40 for_block: FOR '(' expression_stmt expression_stmt . ')' stmt
   41          | FOR '(' expression_stmt expression_stmt . expression ')' stmt

    IDENTIFIER    shift, and go to state 52
    DEC_CONSTANT  shift, and go to state 53
    HEX_CONSTANT  shift, and go to state 54
    INCREMENT     shift, and go to state 2
    DECREMENT     shift, and go to state 3
    '-'           shift, and go to state 55
    '!'           shift, and go to state 56
    '('           shift, and go to state 57
    ')'           shift, and go to state 165

    expression       go to state 166
    sub_expr         go to state 152
    assignment_expr  go to state 59
    unary_expr       go to state 60
    lhs              go to state 22
    arithmetic_expr  go to state 61
    constant         go to state 62


state 161

   53 expression_stmt: expression ';' .

    $default  reduce using rule 53 (expression_stmt)


state 162

   44 while_block: WHILE '(' expression ')' . stmt

    IDENTIFIER  shift, and go to state 126
    INCREMENT   shift, and go to state 2
    DECREMENT   shift, and go to state 3
    SHORT       shift, and go to state 4
    INT         shift, and go to state 5
    LONG        shift, and go to state 6
    LONG_LONG   shift, and go to state 7
    SIGNED      shift, and go to state 8
    UNSIGNED    shift, and go to state 9
    IF          shift, and go to state 127
    FOR         shift, and go to state 128
    WHILE       shift, and go to state 129
    CONTINUE    shift, and go to state 130
    BREAK       shift, and go to state 131
    RETURN      shift, and go to state 132
    '{'         shift, and go to state 119

    type              go to state 134
    data_type         go to state 14
    sign_specifier    go to state 15
    type_specifier    go to state 16
    stmt              go to state 167
    compound_stmt     go to state 136
    single_stmt       go to state 137
    for_block         go to state 138
    if_block          go to state 139
    while_block       go to state 140
    declaration       go to state 141
    declaration_list  go to state 18
    sub_decl          go to state 19
    assignment_expr   go to state 20
    unary_expr        go to state 21
    lhs               go to state 22
    array_index       go to state 23
    function_call     go to state 142


state 163

   55 expression: expression ',' sub_expr .
   57 sub_expr: sub_expr . '>' sub_expr
   58         | sub_expr . '<' sub_expr
   59         | sub_expr . EQ sub_expr
   60         | sub_expr . NOT_EQ sub_expr
   61         | sub_expr . LS_EQ sub_expr
   62         | sub_expr . GR_EQ sub_expr
   63         | sub_expr . LOGICAL_AND sub_expr
   64         | sub_expr . LOGICAL_OR sub_expr

    LOGICAL_AND  shift, and go to state 78
    LOGICAL_OR   shift, and go to state 79
    LS_EQ        shift, and go to state 80
    GR_EQ        shift, and go to state 81
    EQ           shift, and go to state 82
    NOT_EQ       shift, and go to state 83
    '<'          shift, and go to state 84
    '>'          shift, and go to state 85

    $default  reduce using rule 55 (expression)


state 164

   42 if_block: IF '(' expression ')' stmt .
   43         | IF '(' expression ')' stmt . ELSE stmt

    ELSE  shift, and go to state 168

    $default  reduce using rule 42 (if_block)


state 165

   40 for_block: FOR '(' expression_stmt expression_stmt ')' . stmt

    IDENTIFIER  shift, and go to state 126
    INCREMENT   shift, and go to state 2
    DECREMENT   shift, and go to state 3
    SHORT       shift, and go to state 4
    INT         shift, and go to state 5
    LONG        shift, and go to state 6
    LONG_LONG   shift, and go to state 7
    SIGNED      shift, and go to state 8
    UNSIGNED    shift, and go to state 9
    IF          shift, and go to state 127
    FOR         shift, and go to state 128
    WHILE       shift, and go to state 129
    CONTINUE    shift, and go to state 130
    BREAK       shift, and go to state 131
    RETURN      shift, and go to state 132
    '{'         shift, and go to state 119

    type              go to state 134
    data_type         go to state 14
    sign_specifier    go to state 15
    type_specifier    go to state 16
    stmt              go to state 169
    compound_stmt     go to state 136
    single_stmt       go to state 137
    for_block         go to state 138
    if_block          go to state 139
    while_block       go to state 140
    declaration       go to state 141
    declaration_list  go to state 18
    sub_decl          go to state 19
    assignment_expr   go to state 20
    unary_expr        go to state 21
    lhs               go to state 22
    array_index       go to state 23
    function_call     go to state 142


state 166

   41 for_block: FOR '(' expression_stmt expression_stmt expression . ')' stmt
   55 expression: expression . ',' sub_expr

    ','  shift, and go to state 158
    ')'  shift, and go to state 170


state 167

   44 while_block: WHILE '(' expression ')' stmt .

    $default  reduce using rule 44 (while_block)


state 168

   43 if_block: IF '(' expression ')' stmt ELSE . stmt

    IDENTIFIER  shift, and go to state 126
    INCREMENT   shift, and go to state 2
    DECREMENT   shift, and go to state 3
    SHORT       shift, and go to state 4
    INT         shift, and go to state 5
    LONG        shift, and go to state 6
    LONG_LONG   shift, and go to state 7
    SIGNED      shift, and go to state 8
    UNSIGNED    shift, and go to state 9
    IF          shift, and go to state 127
    FOR         shift, and go to state 128
    WHILE       shift, and go to state 129
    CONTINUE    shift, and go to state 130
    BREAK       shift, and go to state 131
    RETURN      shift, and go to state 132
    '{'         shift, and go to state 119

    type              go to state 134
    data_type         go to state 14
    sign_specifier    go to state 15
    type_specifier    go to state 16
    stmt              go to state 171
    compound_stmt     go to state 136
    single_stmt       go to state 137
    for_block         go to state 138
    if_block          go to state 139
    while_block       go to state 140
    declaration       go to state 141
    declaration_list  go to state 18
    sub_decl          go to state 19
    assignment_expr   go to state 20
    unary_expr        go to state 21
    lhs               go to state 22
    array_index       go to state 23
    function_call     go to state 142


state 169

   40 for_block: FOR '(' expression_stmt expression_stmt ')' stmt .

    $default  reduce using rule 40 (for_block)


state 170

   41 for_block: FOR '(' expression_stmt expression_stmt expression ')' . stmt

    IDENTIFIER  shift, and go to state 126
    INCREMENT   shift, and go to state 2
    DECREMENT   shift, and go to state 3
    SHORT       shift, and go to state 4
    INT         shift, and go to state 5
    LONG        shift, and go to state 6
    LONG_LONG   shift, and go to state 7
    SIGNED      shift, and go to state 8
    UNSIGNED    shift, and go to state 9
    IF          shift, and go to state 127
    FOR         shift, and go to state 128
    WHILE       shift, and go to state 129
    CONTINUE    shift, and go to state 130
    BREAK       shift, and go to state 131
    RETURN      shift, and go to state 132
    '{'         shift, and go to state 119

    type              go to state 134
    data_type         go to state 14
    sign_specifier    go to state 15
    type_specifier    go to state 16
    stmt              go to state 172
    compound_stmt     go to state 136
    single_stmt       go to state 137
    for_block         go to state 138
    if_block          go to state 139
    while_block       go to state 140
    declaration       go to state 141
    declaration_list  go to state 18
    sub_decl          go to state 19
    assignment_expr   go to state 20
    unary_expr        go to state 21
    lhs               go to state 22
    array_index       go to state 23
    function_call     go to state 142


state 171

   43 if_block: IF '(' expression ')' stmt ELSE stmt .

    $default  reduce using rule 43 (if_block)


state 172

   41 for_block: FOR '(' expression_stmt expression_stmt expression ')' stmt .

    $default  reduce using rule 41 (for_block)
